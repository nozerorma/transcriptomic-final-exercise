# Open both tables as TSV files with header
cts <- read.table("data/input-2/rawcounts.tsv", sep = "\t", header = TRUE, row.names = 1)
metadata <- read.table("data/input-2/metadata.tsv", sep = "\t", header = TRUE, row.names = 1)
# Factorization of the parameters to overcome possible warnings and/or memory glitches
metadata$agent <- factor(metadata$agent)
metadata$patient <- factor(metadata$patient)
metadata$time <- factor(metadata$time)
# In order to solve the first question in this second part of the exercise, first creating a subset for 24h and 48h samples, and then using this subset to pick only those counts which coincide.
metadata_24 <- subset(metadata, time == '24h')
metadata_48 <- subset(metadata, time == '48h')
cts_24 <- cts[, rownames(metadata_24)]
cts_48 <- cts[, rownames(metadata_48)]
# Then we verify data integrity between both tables
all(rownames(metadata_24) == colnames(cts_24))
all(rownames(metadata_24) %in% colnames(cts_24))
all(rownames(metadata_48) == colnames(cts_48))
all(rownames(metadata_48) %in% colnames(cts_48))
# Now we are ready to create our dds object. As the exercise asks explicitly for samples at 24h cut, we are only going to work with the corresponding subsamples. Design-wise, we will omit time as it has already been split and has no further relevance for the object making.
dds_24 <- DESeqDataSetFromMatrix(countData = cts_24,
colData = metadata_24,
design =~ agent + patient)
dds_24
mcols(dds)
mcols(dds_24)
summary(dds_24)
view(dds_24)
head(dds_24)
summary(dds_24)
keep <- rowSums(counts(dds_24)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
# Open both tables as TSV files with header
cts <- read.table("data/input-2/rawcounts.tsv", sep = "\t", header = TRUE, row.names = 1)
metadata <- read.table("data/input-2/metadata.tsv", sep = "\t", header = TRUE, row.names = 1)
# Factorization of the parameters to overcome possible warnings and/or memory glitches
metadata$agent <- factor(metadata$agent)
metadata$patient <- factor(metadata$patient)
metadata$time <- factor(metadata$time)
# In order to solve the first question in this second part of the exercise, first creating a subset for 24h and 48h samples, and then using this subset to pick only those counts which coincide.
metadata_24 <- subset(metadata, time == '24h')
metadata_48 <- subset(metadata, time == '48h')
cts_24 <- cts[, rownames(metadata_24)]
cts_48 <- cts[, rownames(metadata_48)]
# Then we verify data integrity between both tables
all(rownames(metadata_24) == colnames(cts_24))
all(rownames(metadata_24) %in% colnames(cts_24))
all(rownames(metadata_48) == colnames(cts_48))
all(rownames(metadata_48) %in% colnames(cts_48))
library("DESeq2")
# DeSEQ2 object creation
dds_24 <- DESeqDataSetFromMatrix(countData = cts_24,
colData = metadata_24,
design =~ agent + patient)
dds_24
summary(dds_24)
keep <- rowSums(counts(dds_24)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
dds_24 <- dds_24[keep, ]
# Open both tables as TSV files with header
cts <- read.table("data/input-2/rawcounts.tsv", sep = "\t", header = TRUE, row.names = 1)
metadata <- read.table("data/input-2/metadata.tsv", sep = "\t", header = TRUE, row.names = 1)
# Factorization of the parameters to overcome possible warnings and/or memory glitches
metadata$agent <- factor(metadata$agent)
metadata$patient <- factor(metadata$patient)
metadata$time <- factor(metadata$time)
# In order to solve the first question in this second part of the exercise, first creating a subset for 24h and 48h samples, and then using this subset to pick only those counts which coincide.
metadata_24 <- subset(metadata, time == '24h')
metadata_48 <- subset(metadata, time == '48h')
cts_24 <- cts[, rownames(metadata_24)]
cts_48 <- cts[, rownames(metadata_48)]
# Then we verify data integrity between both tables
all(rownames(metadata_24) == colnames(cts_24))
all(rownames(metadata_24) %in% colnames(cts_24))
all(rownames(metadata_48) == colnames(cts_48))
all(rownames(metadata_48) %in% colnames(cts_48))
library("DESeq2")
# DeSEQ2 object creation
dds_24 <- DESeqDataSetFromMatrix(countData = cts_24,
colData = metadata_24,
design =~ agent + patient)
dds_24
summary(dds_24)
keep <- rowSums(counts(dds_24)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
dds_24_polished <- dds_24[keep, ]
dds_24_polished
summary(dds_24_polished)
keep <- rowSums(counts(dds_24)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
dds_24 <- dds_24[keep, ]
summary(dds_24)
View(dds_24_polished)
## La diferencia entre VST y la función DESeq radica en que la expresión diferencial
## no usa las cuentas normalizadas (y estabilizadas) per sé, sino que los factores de
## normalización y dispersión se incluyen en un modelo BN con las cuentas crudas.
## Para visualización, clustering etc. la función vst transforma las counts y estabiliza
## la varianza APARTE para que podamos trabajar con cuentas ya "listas".
# en analisis exploratorio vamos a tirar de esto, separando las diferentes funciones prestablecidas x deseq2. pierde la logica el
# correr directamente deseq2 bruto dos veces por una cuestion pura de eficiencia
vsd_24 <- vst(dds_24, blind = TRUE)
vsd_24
?dev.new
dev.new()
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
dev.new
dev.new()
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
dev.new()
plotPCA(vsd_24, intgroup = "agent")
dev.new()
plotPCA(vsd_24, intgroup = "patient")
library("pheatmap")
# VST object creation
vsd_24 <- vst(dds_24, blind = TRUE)
par(mfrow = c(2,1))
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# this shant stay here
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
# Open both tables as TSV files with header
cts <- read.table("data/input-2/rawcounts.tsv", sep = "\t", header = TRUE, row.names = 1)
metadata <- read.table("data/input-2/metadata.tsv", sep = "\t", header = TRUE, row.names = 1)
# Factorization of the parameters to overcome possible warnings and/or memory glitches
metadata$agent <- factor(metadata$agent)
metadata$patient <- factor(metadata$patient)
metadata$time <- factor(metadata$time)
# Subsetting
metadata_24 <- subset(metadata, time == '24h')
metadata_48 <- subset(metadata, time == '48h')
cts_24 <- cts[, rownames(metadata_24)]
cts_48 <- cts[, rownames(metadata_48)]
# Then we verify data integrity between both tables
all(rownames(metadata_24) == colnames(cts_24))
all(rownames(metadata_24) %in% colnames(cts_24))
all(rownames(metadata_48) == colnames(cts_48))
all(rownames(metadata_48) %in% colnames(cts_48))
library("DESeq2")
# DeSEQ2 object creation
dds_24 <- DESeqDataSetFromMatrix(countData = cts_24,
colData = metadata_24,
design =~ agent + patient)
dds_24
summary(dds_24)
keep <- rowSums(counts(dds_24)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
dds_24 <- dds_24[keep, ]
summary(dds_24)
# VST object creation
vsd_24 <- vst(dds_24, blind = TRUE)
par(mfrow = c(2,1))
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
agentPCA <- plotPCA(vsd_24, intgroup = "agent")
patientPCA <- plotPCA(vsd_24, intgroup = "patient")
par(mfrow=c(agentPCA,patientPCA))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
agentPCA <- plotPCA(vsd_24, intgroup = "agent")
patientPCA <- plotPCA(vsd_24, intgroup = "patient")
par(mfrow=c(1,2))
source(plotPCA(vsd_24, intgroup = "agent"))
par(mfrow=c(1,2))
plot(agentPCA <- plotPCA(vsd_24, intgroup = "agent"))
plot(patientPCA <- plotPCA(vsd_24, intgroup = "patient"))
dev.new(par(mfrow=c(1,2)))
plot(agentPCA <- plotPCA(vsd_24, intgroup = "agent"))
plot(patientPCA <- plotPCA(vsd_24, intgroup = "patient"))
plot(agentPCA <- plotPCA(vsd_24, intgroup = "agent"))
plot(patientPCA <- plotPCA(vsd_24, intgroup = "patient"))
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
library("pheatmap")
# VST object creation
vsd_24 <- vst(dds_24, blind = TRUE)
fig.keep = "all"
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
knitr::fig.keep = "all"
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# this shant stay here
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
```{r vstPCA, echo=FALSE, fig.width=20, fig.asp=1, out.width="50%", fig.align="default"}
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd_24, intgroup = "patient")
# Distance calculation
sampleDists <- dist(t(assay(vsd_24)))
sampleDistMatrix_24 <- as.matrix(sampleDists_24)
# Distance calculation
sampleDists_24 <- dist(t(assay(vsd_24)))
sampleDistMatrix_24 <- as.matrix(sampleDists_24)
rownames(sampleDistMatrix_24) <- paste(vsd_24$agent, vsd_24$patient, sep="-")
colnames(sampleDistMatrix) <- NULL
colnames(sampleDistMatrix_24) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix_24,
clustering_distance_rows=sampleDists_24,
clustering_distance_cols=sampleDists_24,
col=colors)
dds2_24 <- DESeq(dds_24, test = "Wald")
View(dds2_24)
plotMA(dds2)
plotMA(dds2_24)
View(metadata_24)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# Open both tables as TSV files with header
cts <- read.table("data/input-2/rawcounts.tsv", sep = "\t", header = TRUE, row.names = 1)
metadata <- read.table("data/input-2/metadata.tsv", sep = "\t", header = TRUE, row.names = 1)
# Factorization of the parameters to overcome possible warnings and/or memory glitches
metadata$agent <- factor(metadata$agent)
metadata$patient <- factor(metadata$patient)
metadata$time <- factor(metadata$time)
library("DESeq2")
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent_time)
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent + agent_time)
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ agent_time)
all(rownames(metadata) == colnames(cts))
all(rownames(metadata) %in% colnames(cts))
Now we are ready to create our dds object. As the exercise asks explicitly for samples at 24h cut, we are only going to work with the corresponding subsamples. Design-wise, we will omit time as it has already been split and has no further relevance for the object making.
all(rownames(metadata) == colnames(cts))
all(rownames(metadata) %in% colnames(cts))
head(metadata)
# Now we'll make a new column containing a concatenation of agent and time, for resolution of #1
metadata$agent_time <- as.factor(paste(metadata$agent, metadata$time, sep="_"))
head(metadata)
all(rownames(metadata) == colnames(cts))
all(rownames(metadata) %in% colnames(cts))
library("DESeq2")
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent + agent_time)
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent_time)
dds
summary(dds)
keep <- rowSums(counts(dds)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
dds <- dds[keep, ]
summary(dds)
library("pheatmap")
# VST object creation
vsd <- vst(dds, blind = TRUE)
fig.keep = "all"
plotPCA(vsd_24, intgroup = "agent")
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "patient")
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "patient")
plotPCA(vsd, intgroup = "patient_time")
plotPCA(vsd, intgroup = "agent_time")
plotPCA(vsd, intgroup = "agent_24h")
plotPCA(vsd, intgroup = "agent_time")
# Distance calculation
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$agent, vsd$patient, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dds2 <- DESeq(dds, test = "Wald")
plotMA(dds2)
my_results <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "OHT_24h"),
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(my_results_threshold$padj), 30), ]
mat <- assay(vsd)[head(order(my_results$padj), 30), ]
pheatmap(mat)
my_results_thresholded <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "OHT_24h"),
lfcThreshold = 1,
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(my_results_thresholded$padj), 30), ]
pheatmap(mat)
View(my_results_thresholded)
setwd("/media/miguel/Cuty/transcriptomic-final-exercise/")
source("~/.active-rstudio-document", echo=TRUE)
View(my_results)
View(my_results_thresholded)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
my_results <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "DPN_24h"),
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(my_results$padj), 30), ]
pheatmap(mat)
my_results_thresholded <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "DPN_24h"),
lfcThreshold = 1,
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(my_results_thresholded$padj), 30), ]
pheatmap(mat)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
## DeSEQ2
This is an R Markdown document which contains a fully working script for differential analysis of different biological samples. Main objective is to be able to perform the differential analysis both through DeSEQ2 and the other tool whose name I can't remember.
#### Pregunta 4 (3 puntos):
¿Qué genes se encuentran diferencialmente expresados entre las muestras pertenecientes al grupo tratado con OHT con respecto al control tras 24h? ¿Y en el caso de las muestras tratadas con DPN, también tras 24h? Como parte de la respuesta a esta pregunta, podéis entregar una o más tablas adjuntas donde se incluyan los genes diferencialmente expresados, indicando el criterio o los criterios que habéis seguido para filtrar los resultados, así como cualquier otro gráfico o gráficos que hayáis elaborado durante el análisis.
¿Qué genes se encuentran diferencialmente expresados entre las muestras pertenecientes al grupo tratado con OHT con respecto al control tras 24h? ¿Y en el caso de las muestras tratadas con DPN, también tras 24h? Como parte de la respuesta a esta pregunta, podéis entregar una o más tablas adjuntas donde se incluyan los genes diferencialmente expresados, indicando el criterio o los criterios que habéis seguido para filtrar los resultados, así como cualquier otro gráfico o gráficos que hayáis elaborado durante el análisis.
```{r summarizedexperiment}
# Open both tables as TSV files with header
cts <- read.table("data/input-2/rawcounts.tsv", sep = "\t", header = TRUE, row.names = 1)
metadata <- read.table("data/input-2/metadata.tsv", sep = "\t", header = TRUE, row.names = 1)
# Factorization of the parameters to overcome possible warnings and/or memory glitches
metadata$agent <- factor(metadata$agent)
metadata$patient <- factor(metadata$patient)
metadata$time <- factor(metadata$time)
# Now we'll make a new column containing a concatenation of agent and time, for resolution of #1
metadata$agent_time <- as.factor(paste(metadata$agent, metadata$time, sep="_"))
head(metadata)
all(rownames(metadata) == colnames(cts))
all(rownames(metadata) %in% colnames(cts))
head(metadata)
all(rownames(metadata) == colnames(cts))
all(rownames(metadata) %in% colnames(cts))
head(metadata)
all(rownames(metadata) == colnames(cts))
all(rownames(metadata) %in% colnames(cts))
```
Now we are ready to create our dds object. As the exercise asks explicitly for samples at 24h cut, we are only going to work with the corresponding subsamples. Design-wise, we will omit time as it has already been split and has no further relevance for the object making.
```{r dds_object}
library("DESeq2")
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent_time)
dds
summary(dds)
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent_time)
dds
summary(dds)
# DeSEQ2 object creation
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = metadata,
design =~ patient + agent_time)
dds
summary(dds)
```
```{r pre_proc}
keep <- rowSums(counts(dds)) >= 10 ## Seleccionar genes con más de 10 cuentas en todos los samples
dds <- dds[keep, ]
summary(dds)
library("pheatmap")
library("RColorBrewer")
# VST object creation
vsd <- vst(dds, blind = TRUE)
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "patient")
plotPCA(vsd, intgroup = "agent_time")
# Distance calculation
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$agent, vsd$patient, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
dds2 <- DESeq(dds, test = "Wald")
plotMA(dds2)
results_OHT <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "OHT_24h"),
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(results_OHT$padj), 30), ]
pheatmap(mat)
results_thresholded_OHT <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "OHT_24h"),
lfcThreshold = 1,
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(results_thresholded_OHT$padj), 30), ]
pheatmap(mat)
results_DPN <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "DPN_24h"),
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(results_DPN$padj), 30), ]
pheatmap(mat)
results_thresholded_DPN <- results(object = dds2,
contrast = c("agent_time", "Control_24h", "DPN_24h"),
lfcThreshold = 1,
alpha = 0.05, # predisponer NUESTRO ERROR, por defecto tiene un 0.1
pAdjustMethod = "BH",
tidy = TRUE
)
mat <- assay(vsd)[head(order(results_thresholded_DPN$padj), 30), ]
pheatmap(mat)
View(metadata)
View(results_OHT)
View(results_DPN)
View(results_thresholded_OHT)
View(results_thresholded_DPN)
library(plotly)
library(ggfortify)
library(plotly)
library(ggfortify)
pca_res <- prcomp(vsd, scale. = TRUE)
pca_res <- prcomp(dds, scale. = TRUE)
?count()
count(results_OHT$padj < 0.05)
count(results_OHT$padj < '0.05')
count(results_OHT$padj)
count(results_OHT)
count(results_OHT$padj, value = 0.05)
count(results_OHT$padj, value < 0.05)
count(results_OHT$padj, value = 0.06612084)
rowCounts(results_DPN$padj)
rowCounts(results_DPN$padj, na.rm = TRUE, value = 0:0.05)
which(results_DPN$padj < 0.05)
count(which(results_DPN$padj < 0.05))
length(results_DPN$padj < 0.05)
length(count(results_DPN$padj < 0.05))
length(which(results_DPN$padj < 0.05))
length(which(results_OHT$padj < 0.05))
length(which(results_thresholded_DPN$padj < 0.05))
length(which(results_thresholded_OHT$padj < 0.05))
print('No. of representative genes for DPN treatment: ' + length(which(results_DPN$padj <= 0.05)))
paste('No. of representative genes for DPN treatment: ' + length(which(results_DPN$padj <= 0.05)))
paste0('No. of representative genes for DPN treatment: ' + length(which(results_DPN$padj <= 0.05)))
print(paste0('No. of representative genes for DPN treatment: ' + length(which(results_DPN$padj <= 0.05))))
source("~/.active-rstudio-document", echo=TRUE)
print(paste0('No. of representative genes for DPN treatment: ' + length(which(results_DPN$padj <= 0.05))))
print('No. of representative genes for OHT treatment: ' + length(which(results_OHT$padj <= 0.05)))
print(length(which(results_DPN$padj <= 0.05))
print(length(which(results_DPN$padj <= 0.05)))
print(length(which(results_DPN$padj <= 0.05)))
print(c('No. of representative genes for DPN treatment: ' + length(which(results_DPN$padj <= 0.05))))
print(c('No. of representative genes for DPN treatment: ', length(which(results_DPN$padj <= 0.05))))
print(c('No. of representative genes for DPN treatment: ', length(which(results_DPN$padj <= 0.05)), collapse = ""))
paste0('No. of representative genes for DPN treatment: ', length(which(results_DPN$padj <= 0.05)))
paste0('No. of representative genes for DPN treatment: ', length(which(results_DPN$padj <= 0.05)))
paste0('No. of representative genes for OHT treatment: ', length(which(results_OHT$padj <= 0.05)))
paste0('No. of representative genes for DPN treatment (threshold = 1: ', length(which(results_thresholded_DPN$padj <= 0.05)))
paste0('No. of representative genes for OHT treatment (threshold = 1: ', length(which(results_thresholded_OHT$padj <= 0.05)))
getwd()
